{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractDisplay.module.css';\nimport { ContractParagraphDisplay } from './ContractParagraphDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractDisplay = ({\n  setHeaderName\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [paragraphURL, setParagraphURL] = useState(\"\");\n  const baseURL = \"http://localhost:3000\";\n  const {\n    data\n  } = useFetch(`${baseURL}/contracts/${id}`);\n  React.useEffect(() => {\n    if (data && Object.keys(data).length > 0) {\n      if (setHeaderName) setHeaderName(data.data.attributes[\"name\"]);\n      setParagraphURL(data.relationships.paragraphs.links.self);\n    }\n  }, [data, setHeaderName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    children: paragraphURL.length > 0 && /*#__PURE__*/_jsxDEV(ContractParagraphDisplay, {\n      paragraphURL: paragraphURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 44\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractDisplay, \"VDz7BYkCxRGiuFa+aPT46P1R8iU=\", false, function () {\n  return [useParams, useFetch];\n});\n\n_c = ContractDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractDisplay.tsx"],"names":["React","useState","useParams","useFetch","classes","ContractParagraphDisplay","ContractDisplay","setHeaderName","id","paragraphURL","setParagraphURL","baseURL","data","useEffect","Object","keys","length","attributes","relationships","paragraphs","links","self","fullscreenDiv"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;;AAOA,OAAO,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA4D;AAAA;;AACvF,QAAM;AAAEC,IAAAA;AAAF,MAASN,SAAS,EAAxB;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMU,OAAO,GAAG,uBAAhB;AAED,QAAM;AAACC,IAAAA;AAAD,MAAST,QAAQ,CAAE,GAAEQ,OAAQ,cAAaH,EAAG,EAA5B,CAAvB;AAEIR,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACrB,QAAGD,IAAI,IAAKE,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,GAAyB,CAArC,EACA;AACC,UAAGT,aAAH,EACIA,aAAa,CAACK,IAAI,CAACA,IAAL,CAAUK,UAAV,CAAqB,MAArB,CAAD,CAAb;AACJP,MAAAA,eAAe,CAACE,IAAI,CAACM,aAAL,CAAmBC,UAAnB,CAA8BC,KAA9B,CAAoCC,IAArC,CAAf;AACA;AACF,GAPA,EAOC,CAACT,IAAD,EAAOL,aAAP,CAPD;AASH,sBAEQ;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACkB,aAAxB;AAAA,cACMb,YAAY,CAACO,MAAb,GAAoB,CAApB,iBAAyB,QAAC,wBAAD;AAA0B,MAAA,YAAY,EAAEP;AAAxC;AAAA;AAAA;AAAA;AAAA;AAD/B;AAAA;AAAA;AAAA;AAAA,UAFR;AAMH,CAtBM;;GAAMH,e;UACMJ,S,EAIDC,Q;;;KALLG,e","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractDisplay.module.css';\nimport { ContractParagraphDisplay } from './ContractParagraphDisplay';\n\ntype ContractDataType = {\n    caseID: string;\n    paragraphURL:string;\n}\n\nexport const ContractDisplay = ({setHeaderName} : {setHeaderName?: (val:string)=>void}) => {\n    const { id } = useParams<{ id: string }>();\n    const [paragraphURL, setParagraphURL] = useState(\"\");\n    const baseURL = \"http://localhost:3000\"\n\n   const {data} = useFetch(`${baseURL}/contracts/${id}`) \n\n       React.useEffect(() => {\n        if(data && (Object.keys(data).length>0))\n        {\n         if(setHeaderName)\n             setHeaderName(data.data.attributes[\"name\"]);\n         setParagraphURL(data.relationships.paragraphs.links.self);\n        }\n      },[data, setHeaderName])\n  \n    return (\n    \n            <div className={classes.fullscreenDiv} >\n                { paragraphURL.length>0 && <ContractParagraphDisplay paragraphURL={paragraphURL}/>}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}