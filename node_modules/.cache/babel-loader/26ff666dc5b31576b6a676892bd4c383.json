{"ast":null,"code":"import React from'react';import{Table}from'../../Components/Table/Table';import{useFetch}from'../../hooks/useFetch';import Wrapper from'../../utils/Wrapper';import{formatPostcodeData}from'./PostcodeDisplay';import classes from'./PostcodeDisplay.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var PostcodeNearestInfo=function PostcodeNearestInfo(_ref){var postcode=_ref.postcode;var _useFetch=useFetch(\"https://api.postcodes.io/postcodes/\".concat(postcode,\"/nearest\")),data=_useFetch.data,loading=_useFetch.loading,error=_useFetch.error;var getPostcodeData=function getPostcodeData(data){if(data&&data.result&&data.result.length>0){return data.result.map(function(val){return formatPostcodeData(val);});}else return[];};var postcodeData=React.useMemo(function(){return getPostcodeData(data);},[data]);//Create table structure\nvar prepareSummaryTableColumns=function prepareSummaryTableColumns(){return[{Header:function Header(){return\"Nearest postcodes\";},id:'axes-header',columns:['postcode','region','country'].map(function(th,idx){return{Header:th.charAt(0).toUpperCase()+th.slice(1),accessor:th,style:{width:\"15%\"}};})}];};var areEqual=function areEqual(givenPostCode){return givenPostCode.toLowerCase().replace(/ /g,'')!==postcode.toLowerCase().replace(/ /g,'');};//Fomat data to display as summary\nvar formatSummaryData=function formatSummaryData(data){return data.filter(function(val){return areEqual(val.postcode);}).map(function(entry){return{postcode:entry.postcode,region:entry.region,country:entry.country};});};return/*#__PURE__*/_jsx(Wrapper,{children:loading?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:classes.Loader})}):Object.keys(error).length!==0?/*#__PURE__*/_jsx(\"div\",{children:\" Error while fetching data\"}):/*#__PURE__*/_jsx(Table,{columns:prepareSummaryTableColumns(),data:formatSummaryData(postcodeData),pageIndexValue:0,pageSizeValue:20})});};","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeNearestInfo.tsx"],"names":["React","Table","useFetch","Wrapper","formatPostcodeData","classes","PostcodeNearestInfo","postcode","data","loading","error","getPostcodeData","result","length","map","val","postcodeData","useMemo","prepareSummaryTableColumns","Header","id","columns","th","idx","charAt","toUpperCase","slice","accessor","style","width","areEqual","givenPostCode","toLowerCase","replace","formatSummaryData","filter","entry","region","country","Loader","Object","keys"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table } from '../../Components/Table/Table';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport { formatPostcodeData, PostCodeInfo } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeNearestInfo = ({postcode}: {postcode:string}) => {\n\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}/nearest`);\n    \n    const getPostcodeData = (data:any) => {\n        if (data && data.result && data.result.length>0)  {\n            return data.result.map((val:any)=> formatPostcodeData(val))\n       }\n       else return [];\n    }\n    \n    const postcodeData = React.useMemo(() => getPostcodeData(data), [data]);\n\n    //Create table structure\n    const prepareSummaryTableColumns = () => {\n        return [\n            {\n                Header: () => `Nearest postcodes`,\n                id: 'axes-header',\n                columns: ['postcode','region', 'country'].map((th, idx) => {\n                    return {\n                        Header:  th.charAt(0).toUpperCase() + th.slice(1),\n                        accessor: th,\n                        style: {\n                            width: \"15%\"\n                            },\n                    };\n                }),\n            },\n        ];\n    };\n\n    const areEqual= (givenPostCode:string) => {\n        return givenPostCode.toLowerCase().replace(/ /g,'') !== postcode.toLowerCase().replace(/ /g,'');\n    }\n\n    //Fomat data to display as summary\n    const formatSummaryData = (data: PostCodeInfo[]) => {\n        return data.filter((val)=>areEqual(val.postcode)).map((entry: any) => ({ postcode: entry.postcode, region: entry.region, country:entry.country }));\n    };  \n\n    return (\n        <Wrapper>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) :  <Table\n                    columns={prepareSummaryTableColumns()}\n                    data={formatSummaryData(postcodeData)}\n                    pageIndexValue={0}\n                    pageSizeValue={20}\n                />}\n            </Wrapper>\n       \n    )\n}"]},"metadata":{},"sourceType":"module"}