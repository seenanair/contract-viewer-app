{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeNearestInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Table } from '../../Components/Table/Table';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport classes from './PostcodeDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostcodeNearestInfo = ({\n  postcode\n}) => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`https://api.postcodes.io/postcodes/${postcode}/nearest`);\n\n  const getPostcodeData = data => {\n    if (data && data.result) {\n      data.result.map(val => {\n        return {\n          postcode: val.postcode,\n          region: val.region,\n          country: val.country\n        };\n      });\n    } else return [];\n  };\n\n  const postcodeData = React.useMemo(() => getData(data), [data]); //Create table structure\n\n  const prepareSummaryTableColumns = () => {\n    const width = [\"15%\", \"15%\", \"15%\"];\n    return [{\n      Header: () => 'Nearest postcodes',\n      id: 'axes-header',\n      columns: ['postcode', 'region', 'country'].map((th, idx) => {\n        return {\n          Header: th.charAt(0).toUpperCase() + th.slice(1),\n          accessor: th,\n          style: {\n            width: width[idx]\n          }\n        };\n      })\n    }];\n  }; //Fomat data to display as summary\n\n\n  const formatSummaryData = data => {\n    return data.filter(val => val.postcode !== postcode).map(entry => ({\n      postcode: entry.postcode,\n      region: entry.region,\n      country: entry.country\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ContainerText,\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : Object.keys(error).length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Error while fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: prepareSummaryTableColumns(),\n      data: formatSummaryData(postcodeData),\n      pageIndexValue: 0,\n      pageSizeValue: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostcodeNearestInfo, \"v1Jz2woUITM4O8OeQPgaGWu1Wgg=\", false, function () {\n  return [useFetch];\n});\n\n_c = PostcodeNearestInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcodeNearestInfo\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeNearestInfo.tsx"],"names":["React","Table","useFetch","Wrapper","classes","PostcodeNearestInfo","postcode","data","loading","error","getPostcodeData","result","map","val","region","country","postcodeData","useMemo","getData","prepareSummaryTableColumns","width","Header","id","columns","th","idx","charAt","toUpperCase","slice","accessor","style","formatSummaryData","filter","entry","Loader","ContainerText","Object","keys","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table } from '../../Components/Table/Table';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeNearestInfo = ({postcode}: {postcode:string}) => {\n\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}/nearest`);\n    const getPostcodeData = (data: any): [] => {\n        if (data && data.result)  {\n            data.result.map((val:any)=> {\n                return {\n                    postcode: val.postcode,\n                    region: val.region,\n                    country : val.country,\n                }\n            })\n        }\n        else return [];\n    };\n\n    const postcodeData = React.useMemo(() => getData(data), [data]);\n\n    //Create table structure\n    const prepareSummaryTableColumns = () => {\n        const width:string[] = [\"15%\",\"15%\",\"15%\"];\n        return [\n            {\n                Header: () => 'Nearest postcodes',\n                id: 'axes-header',\n                columns: ['postcode','region', 'country'].map((th, idx) => {\n                    return {\n                        Header:  th.charAt(0).toUpperCase() + th.slice(1),\n                        accessor: th,\n                        style: {\n                            width: width[idx]\n                            },\n                    };\n                }),\n            },\n        ];\n    };\n\n    //Fomat data to display as summary\n    const formatSummaryData = (data: any) => {\n        return data.filter((val)=>val.postcode !== postcode).map((entry: any) => ({ postcode: entry.postcode, region: entry.region, country:entry.country }));\n    };  \n\n    return (\n        <Wrapper>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                    <div className={classes.ContainerText}>Loading</div>\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) :  <Table\n                    columns={prepareSummaryTableColumns()}\n                    data={formatSummaryData(postcodeData)}\n                    pageIndexValue={0}\n                    pageSizeValue={20}\n                />}\n            </Wrapper>\n       \n    )\n}"]},"metadata":{},"sourceType":"module"}