{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParagraphData] = useState([]);\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n  React.useEffect(() => {\n    window.addEventListener('scroll', infiniteScroll);\n  }, []);\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0 && \"data\" in data && !loading) setParagraphData(prevState => [...prevState, data]);\n  }, [data, loading]);\n  React.useLayoutEffect(() => {\n    if (paragraphData.length === 0) return;\n\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) {\n      setParagraphNumber(prev => prev + 1);\n      componentRef.current.scrollTop = componentRef.current.scrollHeight;\n    }\n  }, [paragraphData]);\n\n  const displayParagraphs = () => {\n    const retComponentArr = [];\n    paragraphData.forEach(val => {\n      if (val.data || val.data.attributes) retComponentArr.push( /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n        content: val.data.attributes.text ? val.data.attributes.text : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 39\n      }, this));\n    });\n    return retComponentArr;\n  };\n\n  const infiniteScroll = () => {\n    // End of the document reached?\n    if (componentRef.current && componentRef.current.getBoundingClientRect().bottom === window.innerHeight + 20) {\n      setParagraphNumber(prev => prev + 1); //window.= componentRef.current.getBoundingClientRect().bottom\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    ref: componentRef,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"ecthY8+BQMNrJhZf2Yr0NLD3fVQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParagraphData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","data","loading","error","useEffect","window","addEventListener","infiniteScroll","Object","keys","length","prevState","useLayoutEffect","current","innerHeight","scrollHeight","prev","scrollTop","displayParagraphs","retComponentArr","forEach","val","attributes","push","text","getBoundingClientRect","bottom","fullscreenDiv"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParagraphData] = useState<any>([]);\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n  \n    React.useEffect(()=> {\n        window.addEventListener('scroll', infiniteScroll);\n    },[])\n\n    React.useEffect(()=> {\n        if(Object.keys(data).length!==0 && \"data\" in data && !loading)\n          setParagraphData((prevState:any) => [...prevState, data] );\n    },[data, loading])\n     \n   \n    React.useLayoutEffect(()=> {\n        if(paragraphData.length ===0)\n        return;\n        if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n        {\n            setParagraphNumber(prev=>prev+1);\n            componentRef.current.scrollTop = componentRef.current.scrollHeight;\n        }\n    },[paragraphData])\n\n    const displayParagraphs = ()=> {\n        const retComponentArr: any[] =[]\n          paragraphData.forEach((val:any)=> {\n            if(val.data || val.data.attributes)\n                retComponentArr.push( <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>)\n        })\n        return retComponentArr;\n    }\n    const infiniteScroll = () => {\n        // End of the document reached?\n        if(componentRef.current && componentRef.current.getBoundingClientRect().bottom  === window.innerHeight+20)\n        {\n            setParagraphNumber((prev)=>prev+1);\n            //window.= componentRef.current.getBoundingClientRect().bottom\n        }\n    }\n    \n    return (\n            <div className={classes.fullscreenDiv} ref = {componentRef}>\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}