{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParagraphData] = useState([]);\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n  const [scrollPosition, setScrollPosition] = React.useState(0);\n  React.useEffect(() => {\n    const infiniteScroll = () => {\n      // Check whether end of the document reached\n      if (componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom - window.innerHeight) < 10) {\n        setParagraphNumber(prev => prev + 1);\n        setScrollPosition(window.pageYOffset);\n      }\n    };\n\n    window.addEventListener('scroll', infiniteScroll);\n  }, []);\n  React.useLayoutEffect(() => {\n    window.scroll(0, scrollPosition);\n  }, [scrollPosition, data]);\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0 && \"data\" in data && !loading) setParagraphData(prevState => [...prevState, data]);\n  }, [data, loading]);\n  React.useEffect(() => {\n    if (paragraphData.length === 0) return; //fetch paragraphs until the display window displays scroll bar\n\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) setParagraphNumber(prev => prev + 1);\n  }, [paragraphData]);\n\n  const displayParagraphs = () => {\n    const retComponentArr = [];\n    paragraphData.forEach(val => {\n      if (val.data || val.data.attributes) retComponentArr.push( /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n        content: val.data.attributes.text ? val.data.attributes.text : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 39\n      }, this));\n    });\n    return retComponentArr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    ref: componentRef,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"a+ocI5R6WgCdiMIvycRIXdrfAbM=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParagraphData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","data","loading","error","scrollPosition","setScrollPosition","useEffect","infiniteScroll","current","Math","abs","getBoundingClientRect","bottom","window","innerHeight","prev","pageYOffset","addEventListener","useLayoutEffect","scroll","Object","keys","length","prevState","scrollHeight","displayParagraphs","retComponentArr","forEach","val","attributes","push","text","fullscreenDiv"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParagraphData] = useState<any>([]);\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n    const [scrollPosition,setScrollPosition] = React.useState(0);\n   \n    \n\n    React.useEffect(()=> {\n        const infiniteScroll = () => {\n            // Check whether end of the document reached\n            if(componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom-window.innerHeight)<10)\n            {\n              setParagraphNumber((prev)=>prev+1);\n              setScrollPosition(window.pageYOffset);\n            }\n        }\n        window.addEventListener('scroll', infiniteScroll);\n    },[])\n\n    React.useLayoutEffect(()=> {\n        window.scroll(0,scrollPosition);\n    },[scrollPosition,data])\n\n    React.useEffect(()=> {\n        if(Object.keys(data).length!==0 && \"data\" in data && !loading)\n          setParagraphData((prevState:any) => [...prevState, data] );\n    },[data, loading])\n     \n   \n    React.useEffect(()=> {\n        if(paragraphData.length ===0)\n        return;\n        //fetch paragraphs until the display window displays scroll bar\n        if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n            setParagraphNumber(prev=>prev+1);\n    },[paragraphData])\n\n    const displayParagraphs = ()=> {\n        const retComponentArr: any[] =[]\n          paragraphData.forEach((val:any)=> {\n            if(val.data || val.data.attributes)\n                retComponentArr.push( <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>)\n        })\n        return retComponentArr;\n    }\n   \n    \n    return (\n            <div className={classes.fullscreenDiv} ref = {componentRef}>\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}