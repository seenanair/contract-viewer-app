{"ast":null,"code":"import _slicedToArray from\"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{InfoBox}from'../../Components/InfoBox/InfoBox';import{useFetch}from'../../hooks/useFetch';import{formatPostcodeData}from'./PostcodeDisplay';import classes from'./PostcodeDisplay.module.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var PostcodeInfo=function PostcodeInfo(_ref){var postcode=_ref.postcode;//Custom hook to fetch data\nvar _useFetch=useFetch(\"https://api.postcodes.io/postcodes/\".concat(postcode)),data=_useFetch.data,loading=_useFetch.loading,error=_useFetch.error;var getData=function getData(data){if(data&&data.result)return formatPostcodeData(data.result);else return undefined;};var postcodeData=React.useMemo(function(){return getData(data);},[data]);//Format data to display \nvar formatContentData=function formatContentData(data){return{'Region':data.region,'Country':data.country};};//Create content\nvar prepareContent=function prepareContent(data){var formattedData=formatContentData(data);var detailsArray=[];for(var _i=0,_Object$entries=Object.entries(formattedData);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),k=_Object$entries$_i[0],v=_Object$entries$_i[1];detailsArray.push([k,v]);}return/*#__PURE__*/_jsx(\"ul\",{children:detailsArray.map(function(row,indx){return/*#__PURE__*/_jsxs(\"li\",{role:\"list\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[row[0],\" \"]}),/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsx(\"li\",{children:row[1]},row[1])})]},row[0]);})});};return/*#__PURE__*/_jsx(_Fragment,{children:loading?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:classes.Loader})}):Object.keys(error).length!==0?/*#__PURE__*/_jsx(\"div\",{children:\" Error while fetching data\"}):/*#__PURE__*/_jsx(InfoBox,{title:\"Details\",children:postcodeData?prepareContent(postcodeData):\"\"})});};","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeInfo.tsx"],"names":["React","InfoBox","useFetch","formatPostcodeData","classes","PostcodeInfo","postcode","data","loading","error","getData","result","undefined","postcodeData","useMemo","formatContentData","region","country","prepareContent","formattedData","detailsArray","Object","entries","k","v","push","map","row","indx","Loader","keys","length"],"mappings":"yNACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,kBAAT,KAAiD,mBAAjD,CACA,MAAOC,CAAAA,OAAP,KAAoB,8BAApB,C,6IAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkC,IAAhCC,CAAAA,QAAgC,MAAhCA,QAAgC,CAE1D;AAF0D,cAGzBJ,QAAQ,8CAAuCI,QAAvC,EAHiB,CAGlDC,IAHkD,WAGlDA,IAHkD,CAG5CC,OAH4C,WAG5CA,OAH4C,CAGnCC,KAHmC,WAGnCA,KAHmC,CAK1D,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACH,IAAD,CAAuC,CACnD,GAAIA,IAAI,EAAIA,IAAI,CAACI,MAAjB,CAAyB,MAAOR,CAAAA,kBAAkB,CAACI,IAAI,CAACI,MAAN,CAAzB,CAAzB,IACK,OAAOC,CAAAA,SAAP,CACR,CAHD,CAKA,GAAMC,CAAAA,YAAY,CAAIb,KAAK,CAACc,OAAN,CAAc,iBAAMJ,CAAAA,OAAO,CAACH,IAAD,CAAb,EAAd,CAAmC,CAACA,IAAD,CAAnC,CAAtB,CAGA;AACA,GAAMQ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACR,IAAD,CAAwB,CAC9C,MAAO,CACH,SAAWA,IAAI,CAACS,MADb,CAEH,UAAWT,IAAI,CAACU,OAFb,CAAP,CAIH,CALD,CAOA;AACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACX,IAAD,CAAwB,CACvC,GAAMY,CAAAA,aAAa,CAAGJ,iBAAiB,CAACR,IAAD,CAAvC,CACA,GAAMa,CAAAA,YAAmB,CAAG,EAA5B,CACA,6BAAqBC,MAAM,CAACC,OAAP,CAAeH,aAAf,CAArB,gCAAoD,8DAAxCI,CAAwC,uBAArCC,CAAqC,uBAChDJ,YAAY,CAACK,IAAb,CAAkB,CAACF,CAAD,CAAIC,CAAJ,CAAlB,EACH,CACD,mBACI,oBACKJ,YAAY,CAACM,GAAb,CAAiB,SAACC,GAAD,CAAMC,IAAN,CAAe,CAC7B,mBACI,YAAK,IAAI,CAAC,MAAV,wBACI,sBAAKD,GAAG,CAAC,CAAD,CAAR,OADJ,cAEI,iCACI,oBAAmBA,GAAG,CAAC,CAAD,CAAtB,EAAUA,GAAG,CAAC,CAAD,CAAb,CADJ,EAFJ,GAAsBA,GAAG,CAAC,CAAD,CAAzB,CADJ,CAQH,CATA,CADL,EADJ,CAcP,CApBD,CAqBA,mBACQ,yBACKnB,OAAO,cACN,sCACE,YAAK,SAAS,CAAEJ,OAAO,CAACyB,MAAxB,EADF,EADM,CAKNR,MAAM,CAACS,IAAP,CAAYrB,KAAZ,EAAmBsB,MAAnB,GAA8B,CAA9B,cACM,mDADN,cAEM,KAAC,OAAD,EAAS,KAAK,UAAd,UAA4BlB,YAAY,CAAGK,cAAc,CAACL,YAAD,CAAjB,CAAgC,EAAxE,EARZ,EADR,CAYH,CAvDM","sourcesContent":["\nimport React from 'react';\nimport { InfoBox } from '../../Components/InfoBox/InfoBox';\nimport { useFetch } from '../../hooks/useFetch';\nimport { formatPostcodeData, PostCodeInfo } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeInfo = ({postcode}:{postcode:string}) => {\n\n    //Custom hook to fetch data\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}`);\n    \n    const getData = (data: any): PostCodeInfo |undefined=> {\n        if (data && data.result) return formatPostcodeData(data.result);\n        else return undefined;\n    };\n\n    const postcodeData  = React.useMemo(() => getData(data), [data]);\n\n  \n    //Format data to display \n    const formatContentData = (data: PostCodeInfo) => {\n        return {\n            'Region' : data.region,\n            'Country': data.country,\n        };\n    };\n\n    //Create content\n    const prepareContent = (data: PostCodeInfo) => {\n            const formattedData = formatContentData(data);\n            const detailsArray: any[] = [];\n            for (const [k, v] of Object.entries(formattedData)) {\n                detailsArray.push([k, v]);\n            }\n            return (\n                <ul >\n                    {detailsArray.map((row, indx) => {\n                        return (\n                            <li  role=\"list\" key={row[0]}>\n                                <h2>{row[0]} </h2>\n                                <ul>\n                                    <li key ={row[1]}>{row[1]}</li>\n                                </ul>\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n    };\n    return(\n            <>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) : <InfoBox title={`Details`}>{postcodeData ? prepareContent(postcodeData):\"\"}</InfoBox>}\n             </>\n    );\n}"]},"metadata":{},"sourceType":"module"}