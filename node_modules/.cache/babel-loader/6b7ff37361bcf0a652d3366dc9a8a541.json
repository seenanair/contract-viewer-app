{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [paragraphData, setParaGraphData] = useState([]);\n  const [caseData, setCaseData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({});\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n\n  const fetchData = async (apiUrl, isParagraphData) => {\n    try {\n      fetch(apiUrl).then(res => {\n        return res.json();\n      }).then(data => {\n        if (isParagraphData) {\n          setParaGraphData(prevState => [...prevState, data]);\n        } else setCaseData(data);\n\n        setLoading(false);\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n    } catch (err) {\n      setError(err);\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (paragraphNumber <= 0) return;\n    const paraGraphURL = `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`;\n    fetchData(paraGraphURL, true);\n  }, [paragraphNumber, id, paragraphURL]);\n\n  const formatParagraphs = () => {\n    const data = paragraphData.map(val => {\n      const ret = val.data.attributes.text;\n      return ret;\n    });\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    children: paragraphData.length > 0 && formatParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"hOvKB8fWgMsU4hK4620W5LqgL3g=\", false, function () {\n  return [useParams];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","useParams","classes","ContractParagraphDisplay","paragraphURL","id","paragraphData","setParaGraphData","caseData","setCaseData","loading","setLoading","error","setError","paragraphNumber","setParagraphNumber","baseURL","fetchData","apiUrl","isParagraphData","fetch","then","res","json","data","prevState","catch","err","useEffect","paraGraphURL","formatParagraphs","map","val","ret","attributes","text","fullscreenDiv","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,8BAApB;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA6C;AAAA;;AACjF,QAAM;AAAEC,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAM,EAAN,CAAlD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAM,EAAN,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,eAAD,EAAiBC,kBAAjB,IAAuChB,KAAK,CAACC,QAAN,CAAe,CAAf,CAA7C;AACA,QAAMgB,OAAO,GAAG,uBAAhB;;AAEA,QAAMC,SAAS,GAAG,OAAMC,MAAN,EAAoBC,eAApB,KAAgD;AAC9D,QAAI;AACAC,MAAAA,KAAK,CAACF,MAAD,CAAL,CACKG,IADL,CACWC,GAAD,IAAS;AACX,eAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,OAHL,EAIKF,IAJL,CAIWG,IAAD,IAAU;AACZ,YAAGL,eAAH,EACA;AACEZ,UAAAA,gBAAgB,CAAEkB,SAAD,IAAmB,CAAC,GAAGA,SAAJ,EAAeD,IAAf,CAApB,CAAhB;AACD,SAHD,MAIKf,WAAW,CAACe,IAAD,CAAX;;AACLb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAXL,EAWOe,KAXP,CAWad,KAAK,IAAI;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAdL;AAeH,KAhBD,CAgBE,OAAOgB,GAAP,EAAY;AACVd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACAhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GArBD;;AAwBAZ,EAAAA,KAAK,CAAC6B,SAAN,CAAgB,MAAK;AACjB,QAAGd,eAAe,IAAE,CAApB,EACA;AACA,UAAMe,YAAY,GAAG,GAAEb,OAAQ,GAAEZ,YAAa,SAAQU,eAAgB,cAAtE;AACAG,IAAAA,SAAS,CAACY,YAAD,EAAc,IAAd,CAAT;AACH,GALD,EAKE,CAACf,eAAD,EAAkBT,EAAlB,EAAsBD,YAAtB,CALF;;AAOA,QAAM0B,gBAAgB,GAAG,MAAK;AAC1B,UAAMN,IAAI,GAAIlB,aAAa,CAACyB,GAAd,CAAmBC,GAAD,IAAY;AACxC,YAAMC,GAAG,GAAGD,GAAG,CAACR,IAAJ,CAASU,UAAT,CAAoBC,IAAhC;AACA,aAAOF,GAAP;AACH,KAHa,CAAd;AAIA,WAAOT,IAAP;AACH,GAND;;AAQA,sBAEQ;AAAK,IAAA,SAAS,EAAEtB,OAAO,CAACkC,aAAxB;AAAA,cACK9B,aAAa,CAAC+B,MAAd,GAAqB,CAArB,IAA0BP,gBAAgB;AAD/C;AAAA;AAAA;AAAA;AAAA,UAFR;AAMH,CAtDM;;GAAM3B,wB;UACMF,S;;;KADNE,wB","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const { id } = useParams<{ id: string }>();\n    const [paragraphData, setParaGraphData] = useState<any>([]);\n    const [caseData, setCaseData] = useState<any>({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({});\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n\n    const fetchData = async(apiUrl:string,isParagraphData:boolean) => {\n        try {\n            fetch(apiUrl)\n                .then((res) => {\n                    return res.json()\n                })\n                .then((data) => {\n                    if(isParagraphData)\n                    {\n                      setParaGraphData((prevState:any) => [...prevState, data] );\n                    }\n                    else setCaseData(data);\n                    setLoading(false);\n                }).catch(error => {\n                    setError(error);\n                    setLoading(false);\n                });\n        } catch (err) {\n            setError(err);\n            setLoading(false);\n        }\n    }\n    \n     \n    React.useEffect(()=> {\n        if(paragraphNumber<=0)\n        return;\n        const paraGraphURL= `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`\n        fetchData(paraGraphURL,true);\n    },[paragraphNumber, id, paragraphURL])\n    \n    const formatParagraphs = ()=> {\n        const data =  paragraphData.map((val:any)=> {\n            const ret = val.data.attributes.text;\n            return ret;\n        }) \n        return data;  \n    }\n    \n    return (\n    \n            <div className={classes.fullscreenDiv} >\n                {paragraphData.length>0 && formatParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}