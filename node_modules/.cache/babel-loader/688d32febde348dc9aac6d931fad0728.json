{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [paragraphData, setParaGraphData] = useState([]);\n  const [caseData, setCaseData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({});\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n\n  const fetchData = async apiUrlArr => {\n    try {\n      Promise.all(apiUrlArr.map(url => fetch(url))).then(responses => {\n        return res.json();\n      }).then(data => {\n        setParaGraphData(prevState => [...prevState, data]);\n        setLoading(false);\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n    } catch (err) {\n      setError(err);\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('scroll', infiniteScroll);\n  }, []);\n  React.useEffect(() => {\n    if (paragraphNumber <= 0) return;\n    const paraGraphURL = `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`;\n    fetchData(paraGraphURL);\n  }, [paragraphNumber, id, paragraphURL]);\n\n  const displayParagraphs = () => {\n    return paragraphData.map(val => /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n      content: val.data.attributes.text ? val.data.attributes.text : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this));\n  };\n\n  const infiniteScroll = () => {\n    // End of the document reached?\n    if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n      setParagraphNumber(prev => prev + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"+RQmQoP84ji8HcIOKsn9TpezkZQ=\", false, function () {\n  return [useParams];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","useParams","ParagraphComponent","classes","ContractParagraphDisplay","paragraphURL","id","paragraphData","setParaGraphData","caseData","setCaseData","loading","setLoading","error","setError","paragraphNumber","setParagraphNumber","baseURL","fetchData","apiUrlArr","Promise","all","map","url","fetch","then","responses","res","json","data","prevState","catch","err","useEffect","window","addEventListener","infiniteScroll","paraGraphURL","displayParagraphs","val","attributes","text","innerHeight","document","documentElement","scrollTop","offsetHeight","prev","fullscreenDiv","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const { id } = useParams<{ id: string }>();\n    const [paragraphData, setParaGraphData] = useState<any>([]);\n    const [caseData, setCaseData] = useState<any>({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({});\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n\n    const fetchData = async(apiUrlArr:string[]) => {\n        try {\n            Promise.all(apiUrlArr.map(url=> fetch(url)))\n               .then((responses) => {\n                    return res.json()\n                })\n                .then((data) => {\n                    setParaGraphData((prevState:any) => [...prevState, data] );\n                    setLoading(false);\n                }).catch(error => {\n                    setError(error);\n                    setLoading(false);\n                });\n        } catch (err) {\n            setError(err);\n            setLoading(false);\n        }\n    }\n    React.useEffect(()=> {\n        window.addEventListener('scroll', infiniteScroll);\n    },[])\n     \n    React.useEffect(()=> {\n        if(paragraphNumber<=0)\n        return;\n        const paraGraphURL= `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`\n        fetchData(paraGraphURL);\n    },[paragraphNumber, id, paragraphURL])\n    \n    const displayParagraphs = ()=> {\n        return  paragraphData.map((val:any)=> \n            <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>\n        )   \n    }\n    const infiniteScroll = () => {\n        // End of the document reached?\n        if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight)\n        { setParagraphNumber((prev)=>prev+1);\n        }\n    }\n    \n    return (\n    \n            <div className={classes.fullscreenDiv} >\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}