{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { InfoBox } from '../../Components/InfoBox/InfoBox';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport { formatPostcodeData } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostcodeInfo = ({\n  postcode\n}) => {\n  _s();\n\n  //Custom hook to fetch data\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`https://api.postcodes.io/postcodes/${postcode}`);\n\n  const getData = data => {\n    if (data && data.result) return fformatPostcodeData(data.result);else return [];\n  };\n\n  const postcodeData = React.useMemo(() => {\n    if (data && data.result) {\n      return formatPostcodeData(data.result);\n    }\n  }, [data]); //Format data to display as content\n\n  const formatContentData = data => {\n    return {\n      'Postcode': data.postcode,\n      'Region': data.region,\n      'Country': data.country\n    };\n  }; //Create content\n\n\n  const prepareContent = data => {\n    const formattedData = formatContentData(data);\n    const detailsArray = [];\n\n    for (const [k, v] of Object.entries(formattedData)) {\n      detailsArray.push([k, v]);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: detailsArray.map((row, indx) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [row[0], \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: row[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }, this)]\n        }, indx.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ContainerText,\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : Object.keys(error).length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Error while fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(InfoBox, {\n      title: 'Details',\n      children: postcodeData ? prepareContent(postcodeData) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n};\n\n_s(PostcodeInfo, \"v1Jz2woUITM4O8OeQPgaGWu1Wgg=\", false, function () {\n  return [useFetch];\n});\n\n_c = PostcodeInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcodeInfo\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeInfo.tsx"],"names":["React","InfoBox","useFetch","Wrapper","formatPostcodeData","classes","PostcodeInfo","postcode","data","loading","error","getData","result","fformatPostcodeData","postcodeData","useMemo","formatContentData","region","country","prepareContent","formattedData","detailsArray","k","v","Object","entries","push","map","row","indx","toString","Loader","ContainerText","keys","length"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { InfoBox } from '../../Components/InfoBox/InfoBox';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport { formatPostcodeData, PostCodeInfo } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeInfo = ({postcode}:{postcode:string}) => {\n\n    //Custom hook to fetch data\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}`);\n    \n    const getData = (data: any): [] => {\n        if (data && data.result) return fformatPostcodeData(data.result);\n        else return [];\n    };\n\n    const postcodeData = React.useMemo(() => {\n        if (data && data.result )  {\n         return formatPostcodeData(data.result)\n        }\n    }, [data]);\n\n  \n    //Format data to display as content\n    const formatContentData = (data: PostCodeInfo) => {\n        return {\n            'Postcode': data.postcode,\n            'Region' : data.region,\n            'Country': data.country,\n        };\n    };\n\n    //Create content\n    const prepareContent = (data: PostCodeInfo) => {\n            const formattedData = formatContentData(data);\n            const detailsArray: any[] = [];\n            for (const [k, v] of Object.entries(formattedData)) {\n                detailsArray.push([k, v]);\n            }\n            return (\n                <ul>\n                    {detailsArray.map((row, indx) => {\n                        return (\n                            <li key={indx.toString()}>\n                                <h2>{row[0]} </h2>\n                                <ul>\n                                    <li>{row[1]}</li>\n                                </ul>\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n    };\n    return(\n            <Wrapper>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                    <div className={classes.ContainerText}>Loading</div>\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) : <InfoBox title={'Details'}>{postcodeData ? prepareContent(postcodeData):\"\"}</InfoBox>}\n            </Wrapper>\n    );\n}"]},"metadata":{},"sourceType":"module"}