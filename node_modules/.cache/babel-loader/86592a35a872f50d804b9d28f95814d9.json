{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParagraphData] = useState([]);\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n  const infiniteScroll = React.useCallback(() => {\n    // Check whether end of the document reached\n    if (componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom - window.innerHeight) < 30) {\n      console.log(\"paragraphNumber=\" + paragraphNumber);\n      setParagraphNumber(prev => prev + 1);\n    } //if(componentRef.current && componentRef.current.getBoundingClientRect().bottom === window.innerHeight)\n\n  }, []);\n  React.useEffect(() => {\n    window.addEventListener('scroll', infiniteScroll);\n  }, [infiniteScroll]);\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0 && \"data\" in data && !loading) setParagraphData(prevState => [...prevState, data]);\n  }, [data, loading]);\n  React.useEffect(() => {\n    if (paragraphData.length === 0) return; //fetch paragraphs until the display window displays scroll bar\n\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) setParagraphNumber(prev => prev + 1);\n  }, [paragraphData]);\n\n  const displayParagraphs = () => {\n    const retComponentArr = [];\n    paragraphData.forEach(val => {\n      if (val.data || val.data.attributes) retComponentArr.push( /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n        content: val.data.attributes.text ? val.data.attributes.text : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 39\n      }, this));\n    });\n    return retComponentArr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    ref: componentRef,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"bwOdrp4cApgpprFVIvYjotIflN8=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParagraphData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","data","loading","error","infiniteScroll","useCallback","current","Math","abs","getBoundingClientRect","bottom","window","innerHeight","console","log","prev","useEffect","addEventListener","Object","keys","length","prevState","scrollHeight","displayParagraphs","retComponentArr","forEach","val","attributes","push","text","fullscreenDiv"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParagraphData] = useState<any>([]);\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n  \n    const infiniteScroll = React.useCallback(() => {\n        // Check whether end of the document reached\n        if(componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom-window.innerHeight)<30)\n        {\n            console.log(\"paragraphNumber=\"+paragraphNumber)\n            setParagraphNumber((prev)=>prev+1);\n        }\n        //if(componentRef.current && componentRef.current.getBoundingClientRect().bottom === window.innerHeight)\n       \n    },[])\n\n    React.useEffect(()=> {\n        window.addEventListener('scroll', infiniteScroll);\n    },[infiniteScroll])\n\n    React.useEffect(()=> {\n        if(Object.keys(data).length!==0 && \"data\" in data && !loading)\n          setParagraphData((prevState:any) => [...prevState, data] );\n    },[data, loading])\n     \n   \n    React.useEffect(()=> {\n        if(paragraphData.length ===0)\n        return;\n        //fetch paragraphs until the display window displays scroll bar\n        if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n            setParagraphNumber(prev=>prev+1);\n    },[paragraphData])\n\n    const displayParagraphs = ()=> {\n        const retComponentArr: any[] =[]\n          paragraphData.forEach((val:any)=> {\n            if(val.data || val.data.attributes)\n                retComponentArr.push( <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>)\n        })\n        return retComponentArr;\n    }\n   \n    \n    return (\n            <div className={classes.fullscreenDiv} ref = {componentRef}>\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}