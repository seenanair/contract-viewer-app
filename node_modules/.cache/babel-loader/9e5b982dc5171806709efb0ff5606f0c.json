{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParagraphData] = useState([]);\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const [scrollPosition, setScrollPosition] = React.useState(0);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n  React.useEffect(() => {\n    const handleScroll = () => {\n      // Check whether end of the document reached\n      if (componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom - window.innerHeight) < 10) {\n        setParagraphNumber(prev => prev + 1);\n        setScrollPosition(window.pageYOffset);\n      }\n    };\n\n    const handleResize = () => {\n      updateParagraphs();\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener('scroll', infiniteScroll);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  const updateParagraphs = () => {\n    //fetch paragraphs until the display window displays scroll bar\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) setParagraphNumber(prev => prev + 1);\n  };\n\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0 && \"data\" in data && !loading) setParagraphData(prevState => [...prevState, data]);\n  }, [data, loading]);\n  React.useEffect(() => {\n    if (paragraphData.length === 0) return;\n  }, [paragraphData]);\n\n  const displayParagraphs = () => {\n    const retComponentArr = [];\n    paragraphData.forEach(val => {\n      if (val.data || val.data.attributes) retComponentArr.push( /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n        content: val.data.attributes.text ? val.data.attributes.text : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 39\n      }, this));\n    });\n    return retComponentArr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    ref: componentRef,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"2ZQi+Q4ZaUb6VBW5LxM3srUwHkk=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParagraphData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","scrollPosition","setScrollPosition","data","loading","error","useEffect","handleScroll","current","Math","abs","getBoundingClientRect","bottom","window","innerHeight","prev","pageYOffset","handleResize","updateParagraphs","addEventListener","removeEventListener","infiniteScroll","scrollHeight","Object","keys","length","prevState","displayParagraphs","retComponentArr","forEach","val","attributes","push","text","fullscreenDiv"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParagraphData] = useState<any>([]);\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n    const [scrollPosition,setScrollPosition] = React.useState(0);\n   \n    \n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n   \n    React.useEffect(()=> {\n        const handleScroll = () => {\n            // Check whether end of the document reached\n            if(componentRef.current && Math.abs(componentRef.current.getBoundingClientRect().bottom-window.innerHeight)<10)\n            {\n              setParagraphNumber((prev)=>prev+1);\n              setScrollPosition(window.pageYOffset);\n            }\n        }\n        const handleResize = () => {\n            \n                updateParagraphs();\n        }\n        window.addEventListener('scroll', handleScroll);\n        window.addEventListener(\"resize\", handleResize);\n        return(()=> {\n            window.removeEventListener('scroll',infiniteScroll);\n            window.removeEventListener(\"resize\", handleResize);\n        })\n    },[])\n\n    const updateParagraphs = () => {\n         //fetch paragraphs until the display window displays scroll bar\n         if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n            setParagraphNumber(prev=>prev+1);\n    }\n\n    \n    React.useEffect(()=> {\n        if(Object.keys(data).length!==0 && \"data\" in data && !loading)\n          setParagraphData((prevState:any) => [...prevState, data] );\n    },[data, loading])\n     \n   \n    React.useEffect(()=> {\n        if(paragraphData.length ===0)\n        return;\n       \n    },[paragraphData])\n\n    const displayParagraphs = ()=> {\n        const retComponentArr: any[] =[]\n          paragraphData.forEach((val:any)=> {\n            if(val.data || val.data.attributes)\n                retComponentArr.push( <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>)\n        })\n        return retComponentArr;\n    }\n   \n    \n    return (\n            <div className={classes.fullscreenDiv} ref = {componentRef}>\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}