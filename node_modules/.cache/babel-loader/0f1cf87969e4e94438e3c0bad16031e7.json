{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { InfoBox } from '../../Components/InfoBox/InfoBox';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport classes from './PostcodeDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostcodeInfo = ({\n  postcode\n}) => {\n  _s();\n\n  //Custom hook to fetch data\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`https://api.postcodes.io/postcodes/${postcode}`);\n\n  const getData = data => {\n    if (data && data.result) return data.result;else return [];\n  };\n\n  const postcodeData = React.useMemo(() => getData(data), [data]); //Format data to display as content\n\n  const formatContentData = data => {\n    return {\n      'Postcode': data.postcode,\n      'Country': data.country\n    };\n  }; //Create content\n\n\n  const prepareContent = data => {\n    const formattedData = formatContentData(data);\n    const detailsArray = [];\n\n    for (const [k, v] of Object.entries(formattedData)) {\n      detailsArray.push([k, v]);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: detailsArray.map((row, indx) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [row[0], \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Array.isArray(row[1]) ? row[1].map((val, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: val\n            }, val + i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 64\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              children: row[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this)]\n        }, indx.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ContainerText,\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : Object.keys(error).length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Error while fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(InfoBox, {\n      title: 'Details',\n      children: prepareContent(postcodeData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 13\n  }, this);\n};\n\n_s(PostcodeInfo, \"v1Jz2woUITM4O8OeQPgaGWu1Wgg=\", false, function () {\n  return [useFetch];\n});\n\n_c = PostcodeInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcodeInfo\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeInfo.tsx"],"names":["React","InfoBox","useFetch","Wrapper","classes","PostcodeInfo","postcode","data","loading","error","getData","result","postcodeData","useMemo","formatContentData","country","prepareContent","formattedData","detailsArray","k","v","Object","entries","push","map","row","indx","Array","isArray","val","i","toString","Loader","ContainerText","keys","length"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { InfoBox } from '../../Components/InfoBox/InfoBox';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeInfo = ({postcode}:{postcode:string}) => {\n\n    //Custom hook to fetch data\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}`);\n    const getData = (data: any): [] => {\n        if (data && data.result) return data.result;\n        else return [];\n    };\n\n    const postcodeData = React.useMemo(() => getData(data), [data]);\n\n  \n    //Format data to display as content\n    const formatContentData = (data: any) => {\n        return {\n            'Postcode': data.postcode,\n            'Country': data.country,\n        };\n    };\n\n    //Create content\n    const prepareContent = (data: any) => {\n            const formattedData = formatContentData(data);\n            const detailsArray: any[] = [];\n            for (const [k, v] of Object.entries(formattedData)) {\n                detailsArray.push([k, v]);\n            }\n            return (\n                <ul>\n                    {detailsArray.map((row, indx) => {\n                        return (\n                            <li key={indx.toString()}>\n                                <h2>{row[0]} </h2>\n                                <ul>\n                                    {Array.isArray(row[1]) ? (\n                                        row[1].map((val, i) => <li key={val + i}>{val}</li>)\n                                    )  : (\n                                        <li>{row[1]}</li>\n                                    )}\n                                </ul>\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n    };\n    return(\n            <Wrapper>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                    <div className={classes.ContainerText}>Loading</div>\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) : <InfoBox title={'Details'}>{prepareContent(postcodeData)}</InfoBox>}\n            </Wrapper>\n    );\n}"]},"metadata":{},"sourceType":"module"}