{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParaGraphData] = useState([]);\n  const [caseData, setCaseData] = useState({}); // const [loading, setLoading] = useState(false);\n  // const [error, setError] = useState({});\n\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n\n  const fetchData = async apiUrl => {\n    try {\n      fetch(apiUrl).then(res => {\n        return res.json();\n      }).then(data => {\n        if (Object.keys(data).length !== 0 && \"data\" in data) setParaGraphData(prevState => [...prevState, data]);\n        setLoading(false);\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n    } catch (err) {\n      setError(err);\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('scroll', infiniteScroll);\n  }, []);\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0 && \"data\" in data) setParaGraphData(prevState => [...prevState, data]);\n  }, [data]);\n  /* React.useEffect(()=> {\n       if(paragraphNumber<=0)\n           return;\n       const paraGraphURL= `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`\n       fetchData(paraGraphURL);\n   },[paragraphNumber, id, paragraphURL])*/\n\n  React.useLayoutEffect(() => {\n    if (paragraphData.length === 0) return;\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) setParagraphNumber(prev => prev + 1);\n  }, [paragraphData]);\n\n  const displayParagraphs = () => {\n    const retComponentArr = [];\n    paragraphData.forEach(val => {\n      if (val.data || val.data.attributes) retComponentArr.push( /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n        content: val.data.attributes.text ? val.data.attributes.text : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 39\n      }, this));\n    });\n    return retComponentArr;\n  };\n\n  const infiniteScroll = () => {\n    // End of the document reached?componentRef.current.scrollHeight\n    if (componentRef.current && componentRef.current.getBoundingClientRect().bottom === window.innerHeight) setParagraphNumber(prev => prev + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    ref: componentRef,\n    children: paragraphData.length > 0 && displayParagraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"8r5avu8kiVWS3B1LXvjQo6y3h2E=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/case-details-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParaGraphData","caseData","setCaseData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","data","loading","error","fetchData","apiUrl","fetch","then","res","json","Object","keys","length","prevState","setLoading","catch","setError","err","useEffect","window","addEventListener","infiniteScroll","useLayoutEffect","current","innerHeight","scrollHeight","prev","displayParagraphs","retComponentArr","forEach","val","attributes","push","text","getBoundingClientRect","bottom","fullscreenDiv"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ParagraphComponent } from '../../Components/InfoBox/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\nexport const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParaGraphData] = useState<any>([]);\n    const [caseData, setCaseData] = useState<any>({});\n   // const [loading, setLoading] = useState(false);\n   // const [error, setError] = useState({});\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n\n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n\n    const fetchData = async(apiUrl:string) => {\n        try {\n            fetch(apiUrl)\n                .then((res) => {\n                    return res.json()\n                })\n                .then((data) => {\n                    if(Object.keys(data).length!==0 && \"data\" in data)\n                        setParaGraphData((prevState:any) => [...prevState, data] );\n                    setLoading(false);\n                }).catch(error => {\n                    setError(error);\n                    setLoading(false);\n                });\n        } catch (err) {\n            setError(err);\n            setLoading(false);\n        }\n    }\n    React.useEffect(()=> {\n        window.addEventListener('scroll', infiniteScroll);\n    },[])\n\n    React.useEffect(()=> {\n        if(Object.keys(data).length!==0 && \"data\" in data)\n          setParaGraphData((prevState:any) => [...prevState, data] );\n    },[data])\n     \n   /* React.useEffect(()=> {\n        if(paragraphNumber<=0)\n            return;\n        const paraGraphURL= `${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`\n        fetchData(paraGraphURL);\n    },[paragraphNumber, id, paragraphURL])*/\n    \n    React.useLayoutEffect(()=> {\n        if(paragraphData.length ===0)\n        return;\n        if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n            setParagraphNumber(prev=>prev+1);\n    },[paragraphData])\n\n    const displayParagraphs = ()=> {\n        const retComponentArr: any[] =[]\n          paragraphData.forEach((val:any)=> {\n            if(val.data || val.data.attributes)\n                retComponentArr.push( <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>)\n        })\n        return retComponentArr;\n    }\n    const infiniteScroll = () => {\n        // End of the document reached?componentRef.current.scrollHeight\n        if(componentRef.current && componentRef.current.getBoundingClientRect().bottom === window.innerHeight)\n            setParagraphNumber((prev)=>prev+1);\n    }\n    \n    return (\n    \n            <div className={classes.fullscreenDiv} ref = {componentRef}>\n                {paragraphData.length>0 && displayParagraphs()}\n            </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}