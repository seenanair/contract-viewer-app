{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/CCDC_Demo/ccdc-app/src/Components/Table/Table.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTable, usePagination } from \"react-table\";\nimport classes from './Table.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Table = ({\n  columns,\n  data,\n  selectedRow,\n  pageIndexValue,\n  pageSizeValue,\n  onRowClick\n}) => {\n  _s();\n\n  const {\n    // Table - instance properties:\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    // Pagination - instance properties:\n    // @ts-ignore\n    page,\n    // Instead of using `rows`, we'll use `page`, which has only the rows for the active page\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Final state object of table:\n    state: {\n      pageIndex,\n      pageSize\n    } // @ts-ignore\n\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: pageIndexValue,\n      pageSize: pageSizeValue\n    }\n  }, usePagination);\n  const [tableSelectedRow, setSelectedRow] = React.useState(selectedRow); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Table,\n      children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: classes.TableHeader,\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              className: classes.TableHeader,\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map((row, indx) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              onClick: () => {\n                setSelectedRow(indx);\n                const rowindx = pageIndex > 0 ? pageIndex * pageSize + indx : indx;\n                onRowClick(rowindx);\n              },\n              className: indx === tableSelectedRow ? classes.TableRowSelection : indx % 2 === 0 ? classes.TableRowEven : classes.TableRow,\n              children: row.cells.map((cell, indx) => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  className: classes.TableCell,\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Table, \"FCpc1flGpiqkjZkAipzACYHPTFw=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/CCDC_Demo/ccdc-app/src/Components/Table/Table.tsx"],"names":["React","useTable","usePagination","classes","Table","columns","data","selectedRow","pageIndexValue","pageSizeValue","onRowClick","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","initialState","tableSelectedRow","setSelectedRow","useState","TableHeader","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","indx","getRowProps","rowindx","TableRowSelection","TableRowEven","TableRow","cells","cell","getCellProps","TableCell"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useTable,usePagination, Row } from \"react-table\";\nimport classes from './Table.module.css';\n\nexport const Table = ({ columns, data ,selectedRow,pageIndexValue,pageSizeValue, onRowClick}: {columns:any,data:any,selectedRow:number,pageIndexValue:number,pageSizeValue:number,onRowClick: (indx:number)=>void}) =>  {\n    const {\n        // Table - instance properties:\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow, // Pagination - instance properties:\n        // @ts-ignore\n        page, // Instead of using `rows`, we'll use `page`, which has only the rows for the active page\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        // Final state object of table:\n        state: { pageIndex, pageSize },\n        // @ts-ignore\n      } = useTable({\n      columns,\n      data,\n      initialState: { pageIndex: pageIndexValue,pageSize:pageSizeValue }\n    },usePagination)\n   \n    \n    \n    const [tableSelectedRow,setSelectedRow] = React.useState(selectedRow);\n\n    // Render the UI for your table\n    return  (\n        <>\n         {/* from https://react-table.tanstack.com/docs/examples/pagination\n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n       \n        <div className= {classes.Table}>\n            <table {...getTableProps()} >\n            <thead className = {classes.TableHeader}>\n                {headerGroups.map((headerGroup:any) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map((column:any) => (\n                    <th\n                        {...column.getHeaderProps()}\n                        className = {classes.TableHeader}\n                    >\n                        {column.render('Header')}\n                    </th>\n                    ))}\n                </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {page.map((row: Row<object>,indx: number) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}  onClick={() => {\n                     setSelectedRow(indx);\n                     const rowindx = pageIndex>0 ? (pageIndex*pageSize)+indx:indx;\n                     onRowClick(rowindx)\n                    }} \n                    className= { indx===tableSelectedRow\n                                 ? classes.TableRowSelection \n                                 : indx%2===0 \n                                 ? classes.TableRowEven\n                                 : classes.TableRow}>\n                    {row.cells.map((cell,indx) => {\n                        return (\n                        <td\n                            {...cell.getCellProps()}\n                            className = {classes.TableCell}\n                        >\n                            {cell.render('Cell')}\n                        </td>\n                        )\n                    })}\n                    </tr>\n                )\n                })}\n            </tbody>\n            </table>\n        </div>\n        \n        </>\n      );\n   }\n   "]},"metadata":{},"sourceType":"module"}