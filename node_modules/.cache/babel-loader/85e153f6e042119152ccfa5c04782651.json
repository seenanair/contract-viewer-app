{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react'; //Custom hook \n\nexport const useFetch = apiUrl => {\n  _s();\n\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({});\n  useEffect(() => {\n    setLoading(true);\n    setError({});\n    let isFetch = true;\n\n    try {\n      fetch(apiUrl).then(res => res.json()).then(data => {\n        setLoading(false);\n        if (isFetch) setData(data);\n      });\n    } catch (err) {\n      setError(err);\n    }\n\n    return () => {\n      isFetch = false;\n    };\n  }, [apiUrl]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"W2bxGb73kZ4B7FnRKxvNlNsHB9Q=\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/CCDC_Demo/ccdc-app/src/hooks/useFetch.ts"],"names":["useEffect","useState","useFetch","apiUrl","data","setData","loading","setLoading","error","setError","isFetch","fetch","then","res","json","err"],"mappings":";;AAAA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAmB;AAAA;;AAEvC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBJ,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,EAAD,CAAjC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,QAAIC,OAAO,GAAG,IAAd;;AACA,QACA;AACIC,MAAAA,KAAK,CAACR,MAAD,CAAL,CACCS,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,EAECF,IAFD,CAEOR,IAAD,IAAU;AACZG,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,YAAGG,OAAH,EACGL,OAAO,CAACD,IAAD,CAAP;AAEX,OAPI;AAQH,KAVD,CAWA,OAAMW,GAAN,EACA;AACIN,MAAAA,QAAQ,CAACM,GAAD,CAAR;AACH;;AACD,WAAO,MAAM;AAACL,MAAAA,OAAO,GAAG,KAAV;AAAgB,KAA9B;AACH,GApBQ,EAoBP,CAACP,MAAD,CApBO,CAAT;AAsBA,SAAO;AAACC,IAAAA,IAAD;AAAME,IAAAA,OAAN;AAAcE,IAAAA;AAAd,GAAP;AACH,CA9BM;;GAAMN,Q","sourcesContent":["import React, { useEffect, useState } from 'react';\n\n//Custom hook \nexport const useFetch = (apiUrl:string) => {\n\n    const [data,setData] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error,setError] = useState({});\n\n\n    useEffect(() => {\n        setLoading(true);\n        setError({});\n        let isFetch = true;\n        try\n        {\n            fetch(apiUrl)\n            .then((res) => res.json())\n            .then((data) => {\n                setLoading(false);\n                if(isFetch) \n                   setData(data);\n\n       });\n        }\n        catch(err)\n        {\n            setError(err);\n        }\n        return(() => {isFetch = false})\n    },[apiUrl])\n\n    return {data,loading,error}\n}"]},"metadata":{},"sourceType":"module"}