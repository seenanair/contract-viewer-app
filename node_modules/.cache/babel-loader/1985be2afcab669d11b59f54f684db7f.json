{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react'; //Custom hook for fetch\n\nexport const useFetchAll = urls => {\n  _s();\n\n  const [dataArray, setDataArray] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({}); // map every url to the promise of the fetch\n\n  let requests = urls.map(url => fetch(url));\n  useEffect(() => {\n    setLoading(true);\n    setError({});\n    const retData = [];\n\n    try {\n      // Promise.all waits until all jobs are resolved\n      Promise.all(requests).then(responses => {\n        responses.forEach(async (response) => {\n          await response.json().then(data => {\n            retData.push(data.result);\n          });\n          ;\n          setDataArray(retData);\n        });\n      });\n    } catch (err) {\n      setError(err);\n    }\n  }, [requests]);\n  return {\n    dataArray,\n    loading,\n    error\n  };\n};\n\n_s(useFetchAll, \"xK4gUxXXstZLLs3CulCOYg7xaio=\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/hooks/useFetchAll.ts"],"names":["useEffect","useState","useFetchAll","urls","dataArray","setDataArray","loading","setLoading","error","setError","requests","map","url","fetch","retData","Promise","all","then","responses","forEach","response","json","data","push","result","err"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAoB;AAAA;;AAC3C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,EAA1C;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAH2C,CAI3C;;AACA,MAAIS,QAAQ,GAAGP,IAAI,CAACQ,GAAL,CAASC,GAAG,IAAIC,KAAK,CAACD,GAAD,CAArB,CAAf;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,UAAMK,OAAa,GAAG,EAAtB;;AACA,QAAI;AACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBO,IAAtB,CAA2BC,SAAS,IAAI;AACnCA,QAAAA,SAAS,CAACC,OAAV,CAAkB,OAAOC,QAAP,KACnB;AACI,gBAAMA,QAAQ,CAACC,IAAT,GAAgBJ,IAAhB,CAAsBK,IAAD,IAC3B;AACIR,YAAAA,OAAO,CAACS,IAAR,CAAaD,IAAI,CAACE,MAAlB;AACH,WAHK,CAAN;AAGG;AACHnB,UAAAA,YAAY,CAACS,OAAD,CAAZ;AACH,SAPA;AAQJ,OATD;AAUP,KAZD,CAYE,OAAOW,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAD,CAAR;AACH;AACJ,GAnBQ,EAmBN,CAACf,QAAD,CAnBM,CAAT;AAqBA,SAAO;AAAEN,IAAAA,SAAF;AAAaE,IAAAA,OAAb;AAAsBE,IAAAA;AAAtB,GAAP;AACH,CA7BM;;GAAMN,W","sourcesContent":["import { useEffect, useState } from 'react';\n\n//Custom hook for fetch\nexport const useFetchAll = (urls: string[]) => {\n    const [dataArray, setDataArray] = useState<any[]>();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({});\n    // map every url to the promise of the fetch\n    let requests = urls.map(url => fetch(url));\n\n    useEffect(() => {\n        setLoading(true);\n        setError({});\n        const retData:any[] = [];\n        try {\n            // Promise.all waits until all jobs are resolved\n                Promise.all(requests).then(responses => { \n                     responses.forEach(async (response)=> \n                    {\n                        await response.json().then((data) => \n                        {\n                            retData.push(data.result);\n                        });;\n                        setDataArray(retData);\n                    })\n                })\n        } catch (err) {\n            setError(err);\n        }\n    }, [requests]);\n\n    return { dataArray, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}