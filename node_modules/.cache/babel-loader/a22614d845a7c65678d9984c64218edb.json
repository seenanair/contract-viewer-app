{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeNearestInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Table } from '../../Components/Table/Table';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport { formatPostcodeData } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostcodeNearestInfo = ({\n  postcode\n}) => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`https://api.postcodes.io/postcodes/${postcode}/nearest`);\n\n  const getPostcodeData = data => {\n    if (data && data.result && data.result.length > 0) {\n      return data.result.map(val => formatPostcodeData(val));\n    } else return [];\n  };\n\n  const postcodeData = React.useMemo(() => getPostcodeData(data), [data]); //Create table structure\n\n  const prepareSummaryTableColumns = () => {\n    const width = [\"15%\", \"15%\", \"15%\"];\n    return [{\n      Header: () => `Nearest postcodesfor${postcode.toUpperCase()}`,\n      id: 'axes-header',\n      columns: ['postcode', 'region', 'country'].map((th, idx) => {\n        return {\n          Header: th.charAt(0).toUpperCase() + th.slice(1),\n          accessor: th,\n          style: {\n            width: width[idx]\n          }\n        };\n      })\n    }];\n  };\n\n  const areEqual = givenPostCode => {\n    return givenPostCode.toLowerCase().replace(/ /g, '') !== postcode.toLowerCase().replace(/ /g, '');\n  }; //Fomat data to display as summary\n\n\n  const formatSummaryData = data => {\n    return data.filter(val => areEqual(val.postcode)).map(entry => ({\n      postcode: entry.postcode,\n      region: entry.region,\n      country: entry.country\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.Loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.ContainerText,\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : Object.keys(error).length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Error while fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: prepareSummaryTableColumns(),\n      data: formatSummaryData(postcodeData),\n      pageIndexValue: 0,\n      pageSizeValue: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostcodeNearestInfo, \"v1Jz2woUITM4O8OeQPgaGWu1Wgg=\", false, function () {\n  return [useFetch];\n});\n\n_c = PostcodeNearestInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcodeNearestInfo\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/FEATURE_SPACE/FeatureSpace_Demo/feature-space-app/src/pages/Display/PostcodeNearestInfo.tsx"],"names":["React","Table","useFetch","Wrapper","formatPostcodeData","classes","PostcodeNearestInfo","postcode","data","loading","error","getPostcodeData","result","length","map","val","postcodeData","useMemo","prepareSummaryTableColumns","width","Header","toUpperCase","id","columns","th","idx","charAt","slice","accessor","style","areEqual","givenPostCode","toLowerCase","replace","formatSummaryData","filter","entry","region","country","Loader","ContainerText","Object","keys"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table } from '../../Components/Table/Table';\nimport { useFetch } from '../../hooks/useFetch';\nimport Wrapper from '../../utils/Wrapper';\nimport { formatPostcodeData, PostCodeInfo } from './PostcodeDisplay';\nimport classes from './PostcodeDisplay.module.css';\n\nexport const PostcodeNearestInfo = ({postcode}: {postcode:string}) => {\n\n    const { data, loading, error } = useFetch(`https://api.postcodes.io/postcodes/${postcode}/nearest`);\n    \n    const getPostcodeData = (data:any) => {\n        if (data && data.result && data.result.length>0)  {\n            return data.result.map((val:any)=> formatPostcodeData(val))\n       }\n       else return [];\n    }\n    \n    const postcodeData = React.useMemo(() => getPostcodeData(data), [data]);\n\n    //Create table structure\n    const prepareSummaryTableColumns = () => {\n        const width:string[] = [\"15%\",\"15%\",\"15%\"];\n        return [\n            {\n                Header: () => `Nearest postcodesfor${postcode.toUpperCase()}`,\n                id: 'axes-header',\n                columns: ['postcode','region', 'country'].map((th, idx) => {\n                    return {\n                        Header:  th.charAt(0).toUpperCase() + th.slice(1),\n                        accessor: th,\n                        style: {\n                            width: width[idx]\n                            },\n                    };\n                }),\n            },\n        ];\n    };\n\n    const areEqual= (givenPostCode:string) => {\n        return givenPostCode.toLowerCase().replace(/ /g,'') !== postcode.toLowerCase().replace(/ /g,'');\n    }\n\n    //Fomat data to display as summary\n    const formatSummaryData = (data: PostCodeInfo[]) => {\n        return data.filter((val)=>areEqual(val.postcode)).map((entry: any) => ({ postcode: entry.postcode, region: entry.region, country:entry.country }));\n    };  \n\n    return (\n        <Wrapper>\n                {loading ? \n                ( <>\n                    <div className={classes.Loader} />\n                    <div className={classes.ContainerText}>Loading</div>\n                 </>\n                )\n                : Object.keys(error).length !== 0 ? (\n                        <div> Error while fetching data</div>\n                    ) :  <Table\n                    columns={prepareSummaryTableColumns()}\n                    data={formatSummaryData(postcodeData)}\n                    pageIndexValue={0}\n                    pageSizeValue={20}\n                />}\n            </Wrapper>\n       \n    )\n}"]},"metadata":{},"sourceType":"module"}