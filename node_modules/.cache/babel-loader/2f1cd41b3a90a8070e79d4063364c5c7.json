{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ParagraphComponent from '../../Components/ParagraphComponent/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch'; //import Wrapper from '../../utils/Wrapper';\n\nimport classes from './ContractParagraphDisplay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContractParagraphDisplay = ({\n  paragraphURL\n}) => {\n  _s();\n\n  const [paragraphData, setParagraphData] = useState([]);\n  const [paragraphNumber, setParagraphNumber] = React.useState(1);\n  const baseURL = \"http://localhost:3000\";\n  const componentRef = React.useRef(null);\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`);\n  React.useEffect(() => {\n    const handleResize = () => {\n      fillParagraphsOnEmptySpace();\n    }; // window.addEventListener('scroll', handleScroll);\n\n\n    window.addEventListener(\"resize\", handleResize); //Clean up\n\n    return () => {\n      //  window.removeEventListener('scroll',handleScroll);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  const fillParagraphsOnEmptySpace = () => {\n    //fetch paragraphs until the display window displays scroll bar\n    if (componentRef.current && window.innerHeight > componentRef.current.scrollHeight) setParagraphNumber(prev => prev + 1);\n  };\n\n  React.useEffect(() => {\n    if (loading || error) return;\n    if (Object.keys(data).length !== 0 && \"data\" in data) setParagraphData(prevState => [...prevState, data]);\n  }, [data, loading, error]);\n  React.useEffect(() => {\n    if (paragraphData.length === 0) return;\n    fillParagraphsOnEmptySpace();\n  }, [paragraphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.fullscreenDiv,\n    onScroll: handleScroll,\n    ref: componentRef,\n    \"data-testid\": \"contract-paragraphs\",\n    children: paragraphData.map(val => /*#__PURE__*/_jsxDEV(ParagraphComponent, {\n      content: val.data.attributes.text ? val.data.attributes.text : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ContractParagraphDisplay, \"MY/kVWxvpTtUnSEL2h3zE5uqlrs=\", false, function () {\n  return [useFetch];\n});\n\n_c = ContractParagraphDisplay;\nexport default ContractParagraphDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractParagraphDisplay\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/Personal/INTERVIEW/DEMO/ThoughtRiver/contract-viewer-app/src/pages/Display/ContractParagraphDisplay.tsx"],"names":["React","useState","ParagraphComponent","useFetch","classes","ContractParagraphDisplay","paragraphURL","paragraphData","setParagraphData","paragraphNumber","setParagraphNumber","baseURL","componentRef","useRef","data","loading","error","useEffect","handleResize","fillParagraphsOnEmptySpace","window","addEventListener","removeEventListener","current","innerHeight","scrollHeight","prev","Object","keys","length","prevState","fullscreenDiv","handleScroll","map","val","attributes","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAQC,kBAAR,MAAiC,wDAAjC;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,uCAApB;;;AAGC,MAAMC,wBAAwB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA6C;AAAA;;AAC3E,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAM,EAAN,CAAlD;AACA,QAAM,CAACQ,eAAD,EAAiBC,kBAAjB,IAAuCV,KAAK,CAACC,QAAN,CAAe,CAAf,CAA7C;AACA,QAAMU,OAAO,GAAG,uBAAhB;AACA,QAAMC,YAAY,GAAGZ,KAAK,CAACa,MAAN,CAA6B,IAA7B,CAArB;AAGA,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,OAAN;AAAcC,IAAAA;AAAd,MAAuBb,QAAQ,CAAE,GAAEQ,OAAQ,GAAEL,YAAa,SAAQG,eAAgB,cAAnD,CAArC;AAEAT,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAK;AAEjB,UAAMC,YAAY,GAAG,MAAM;AACvBC,MAAAA,0BAA0B;AAC7B,KAFD,CAFiB,CAKlB;;;AACCC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC,EANiB,CAQjB;;AACA,WAAO,MAAK;AACV;AACEE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACH,KAHD;AAIH,GAbD,EAaE,EAbF;;AAeA,QAAMC,0BAA0B,GAAG,MAAM;AACrC;AACA,QAAGP,YAAY,CAACW,OAAb,IAAwBH,MAAM,CAACI,WAAP,GAAqBZ,YAAY,CAACW,OAAb,CAAqBE,YAArE,EACGf,kBAAkB,CAACgB,IAAI,IAAEA,IAAI,GAAC,CAAZ,CAAlB;AACP,GAJA;;AAMA1B,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAK;AACjB,QAAGF,OAAO,IAAIC,KAAd,EACE;AACF,QAAGW,MAAM,CAACC,IAAP,CAAYd,IAAZ,EAAkBe,MAAlB,KAA2B,CAA3B,IAAgC,UAAUf,IAA7C,EACEN,gBAAgB,CAAEsB,SAAD,IAAmB,CAAC,GAAGA,SAAJ,EAAehB,IAAf,CAApB,CAAhB;AACL,GALD,EAKE,CAACA,IAAD,EAAOC,OAAP,EAAeC,KAAf,CALF;AAQAhB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAK;AACjB,QAAGV,aAAa,CAACsB,MAAd,KAAwB,CAA3B,EACI;AACJV,IAAAA,0BAA0B;AAC7B,GAJD,EAIE,CAACZ,aAAD,CAJF;AAQA,sBACQ;AAAK,IAAA,SAAS,EAAEH,OAAO,CAAC2B,aAAxB;AAAuC,IAAA,QAAQ,EAAEC,YAAjD;AAA+D,IAAA,GAAG,EAAIpB,YAAtE;AAAoF,mBAAY,qBAAhG;AAAA,cACKL,aAAa,CAAC0B,GAAd,CAAmBC,GAAD,iBACf,QAAC,kBAAD;AAAoB,MAAA,OAAO,EAAEA,GAAG,CAACpB,IAAJ,CAASqB,UAAT,CAAoBC,IAApB,GAAyBF,GAAG,CAACpB,IAAJ,CAASqB,UAAT,CAAoBC,IAA7C,GAAkD;AAA/E;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADR;AAOH,CArDA;;GAAM/B,wB;UAO0BF,Q;;;KAP1BE,wB;AAuDP,eAAeA,wBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport  ParagraphComponent  from '../../Components/ParagraphComponent/ParagraphComponent';\nimport { useFetch } from '../../hooks/useFetch';\n//import Wrapper from '../../utils/Wrapper';\nimport classes from './ContractParagraphDisplay.module.css';\n\n\n const ContractParagraphDisplay = ({paragraphURL} : {paragraphURL: string}) => {\n    const [paragraphData, setParagraphData] = useState<any>([]);\n    const [paragraphNumber,setParagraphNumber] = React.useState(1);\n    const baseURL = \"http://localhost:3000\"\n    const componentRef = React.useRef<HTMLDivElement>(null);\n   \n    \n    const {data,loading,error} = useFetch(`${baseURL}${paragraphURL}?page=${paragraphNumber}&pageSize=50`) \n   \n    React.useEffect(()=> {\n        \n        const handleResize = () => {\n            fillParagraphsOnEmptySpace()\n        }\n       // window.addEventListener('scroll', handleScroll);\n        window.addEventListener(\"resize\", handleResize);\n\n        //Clean up\n        return(()=> {\n          //  window.removeEventListener('scroll',handleScroll);\n            window.removeEventListener(\"resize\", handleResize);\n        })\n    },[])\n\n    const fillParagraphsOnEmptySpace = () => {\n        //fetch paragraphs until the display window displays scroll bar\n        if(componentRef.current && window.innerHeight > componentRef.current.scrollHeight)\n           setParagraphNumber(prev=>prev+1);\n   }\n    \n    React.useEffect(()=> {\n        if(loading || error)\n          return;\n        if(Object.keys(data).length!==0 && \"data\" in data)\n          setParagraphData((prevState:any) => [...prevState, data] );\n    },[data, loading,error])\n     \n   \n    React.useEffect(()=> {\n        if(paragraphData.length ===0)\n            return;\n        fillParagraphsOnEmptySpace();\n    },[paragraphData])\n\n    \n    \n    return (\n            <div className={classes.fullscreenDiv} onScroll={handleScroll} ref = {componentRef} data-testid=\"contract-paragraphs\">\n                {paragraphData.map((val:any) => \n                    <ParagraphComponent content={val.data.attributes.text?val.data.attributes.text:\"\"}/>\n                )}\n            </div>\n    );\n};\n\nexport default ContractParagraphDisplay;"]},"metadata":{},"sourceType":"module"}