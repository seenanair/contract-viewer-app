{"ast":null,"code":"var _jsxFileName = \"/Users/seenanair/Desktop/CCDC_Demo/ccdc-app/src/DataBuilder/DataBuilder.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Table } from \"../Components/Table\";\nimport Aux from \"../hoc/Aux\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataBuilder = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`https://api.test.datacite.org/dois?query=prefix:10.5517`);\n\n  const prepareTableColumns = () => {\n    return [{\n      Header: () => \"Crystal Structure information\",\n      id: \"axes-header\",\n      columns: [\"ID\", \"Title\"].map((th, idx) => {\n        return {\n          Header: th,\n          accessor: th\n        };\n      })\n    }];\n  };\n\n  const formatData = data => {\n    return data.map(entry => ({\n      id: entry.id,\n      title: entry.attributes.titles[0].title\n    }));\n  };\n\n  const getData = data => {\n    if (data && data.data && data.data.length > 0) return data.data;else return [];\n  };\n\n  const ccdData = getData(data);\n  return /*#__PURE__*/_jsxDEV(Aux, {\n    children: ccdData.length > 0 && !loading ? /*#__PURE__*/_jsxDEV(Table, {\n      columns: prepareTableColumns(),\n      data: formatData(ccdData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 45\n    }, this) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataBuilder, \"9JwoaDR3IhVmHFx88DLkMf7wNyw=\", false, function () {\n  return [useFetch];\n});\n\n_c = DataBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataBuilder\");","map":{"version":3,"sources":["/Users/seenanair/Desktop/CCDC_Demo/ccdc-app/src/DataBuilder/DataBuilder.tsx"],"names":["React","Table","Aux","useFetch","DataBuilder","data","loading","error","prepareTableColumns","Header","id","columns","map","th","idx","accessor","formatData","entry","title","attributes","titles","getData","length","ccdData"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAE/B,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,OAAN;AAAcC,IAAAA;AAAd,MAAyBJ,QAAQ,CAAE,yDAAF,CAAvC;;AAEA,QAAMK,mBAAmB,GAAG,MAAM;AAC5B,WAAO,CACL;AACEC,MAAAA,MAAM,EAAE,MAAM,+BADhB;AAEEC,MAAAA,EAAE,EAAE,aAFN;AAGEC,MAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgBC,GAAhB,CAAoB,CAACC,EAAD,EAAKC,GAAL,KAAa;AACxC,eAAO;AACLL,UAAAA,MAAM,EAAEI,EADH;AAELE,UAAAA,QAAQ,EAAEF;AAFL,SAAP;AAID,OALQ;AAHX,KADK,CAAP;AAYD,GAbL;;AAcC,QAAMG,UAAU,GAAIX,IAAD,IAAa;AAC3B,WAAOA,IAAI,CAACO,GAAL,CAAUK,KAAD,KAAgB;AAAEP,MAAAA,EAAE,EAAEO,KAAK,CAACP,EAAZ;AAAgBQ,MAAAA,KAAK,EAAED,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwB,CAAxB,EAA2BF;AAAlD,KAAhB,CAAT,CAAP;AACJ,GAFD;;AAIA,QAAMG,OAAO,GAAIhB,IAAD,IAAmB;AAC9B,QAAGA,IAAI,IAAIA,IAAI,CAACA,IAAb,IAAqBA,IAAI,CAACA,IAAL,CAAUiB,MAAV,GAAiB,CAAzC,EACE,OAAOjB,IAAI,CAACA,IAAZ,CADF,KAGE,OAAO,EAAP;AACN,GALD;;AAOA,QAAMkB,OAAO,GAAGF,OAAO,CAAChB,IAAD,CAAvB;AAEC,sBACI,QAAC,GAAD;AAAA,cACKkB,OAAO,CAACD,MAAR,GAAe,CAAf,IAAoB,CAAChB,OAArB,gBAA+B,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEE,mBAAmB,EAAnC;AAAuC,MAAA,IAAI,EAAEQ,UAAU,CAACO,OAAD;AAAvD;AAAA;AAAA;AAAA;AAAA,YAA/B,GAAqG;AAD1G;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CApCM;;GAAMnB,W;UAEoBD,Q;;;KAFpBC,W","sourcesContent":["\nimport React from \"react\";\nimport { Table } from \"../Components/Table\";\nimport Aux from \"../hoc/Aux\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport { StructuralData } from \"./SDInterface\";\n\nexport const DataBuilder = () => {\n\n  const {data,loading,error} =   useFetch(`https://api.test.datacite.org/dois?query=prefix:10.5517`);\n\n  const prepareTableColumns = () => {\n        return [\n          {\n            Header: () => \"Crystal Structure information\",\n            id: \"axes-header\",\n            columns: [\"ID\", \"Title\"].map((th, idx) => {\n              return {\n                Header: th,\n                accessor: th,\n              };\n            }),\n          },\n        ];\n      };\n   const formatData = (data:any)=> {\n        return data.map((entry:any) => ({ id: entry.id, title: entry.attributes.titles[0].title}))\n   }\n\n   const getData = (data:any) : [] => {\n        if(data && data.data && data.data.length>0)\n          return data.data;\n        else\n          return [];  \n   }\n\n   const ccdData = getData(data);\n      \n    return (\n        <Aux>\n            {ccdData.length>0 && !loading ? <Table columns={prepareTableColumns()} data={formatData(ccdData)}/> : \"\"}\n        </Aux>\n        )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}